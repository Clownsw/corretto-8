/*
* Copyright (c) 2019, Amazon.com, Inc. or its affiliates. All Rights Reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation. Amazon designates this
* particular file as subject to the "Classpath" exception as provided
* by Oracle in the LICENSE file that accompanied this code.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*/

configurations {
    freetype
    vcruntime
}

ext {
    arch = System.getenv('PROCESSOR_ARCHITECTURE')

    switch(arch) {
        case 'x86':
            arch_alias = 'x86'
            folder_alias = 'x86'
            break;
        case 'AMD64':
            arch_alias = 'x64'
            folder_alias = 'x86_64'
            break;
        default:
            throw new GradleException("${arch} is not suported")
    }

    maven_repo = project.getProperty('maven_repository')
}

repositories {
    maven {
        url maven_repo
        authentication {
           awsIm(AwsImAuthentication)
        }
    }
}

dependencies {
    freetype "freetype:freetype.windows.$arch_alias:2.9.1@zip"
    vcruntime "vcruntime:vcruntime.$arch_alias:10.00.40219.325@zip"
}

apply plugin: "java"
apply plugin: "maven-publish"

task unpackFreeType(type: Copy) {
    dependsOn configurations.freetype

    from zipTree(configurations.freetype.singleFile)
    into "$buildRoot/input_artifacts"
}

task unpackVcRuntime(type: Copy) {
    dependsOn configurations.vcruntime

    from zipTree(configurations.vcruntime.singleFile)
    into "$buildRoot/input_artifacts/vcruntime"
}

task copyImages(type: Copy) {
    dependsOn unpackFreeType
    dependsOn unpackVcRuntime
    dependsOn ':installers:windows:images:build'

    from "$projectDir/../images/corretto-build/buildRoot/src/build/windows-$folder_alias-normal-server-release/images"
    into "$buildRoot/images"
}

task packageJdk(type: Zip) {
    dependsOn copyImages

    archiveFileName = "j2sdk-image.zip"
    destinationDirectory = file("$buildRoot/build")

    from "$buildRoot/images/j2sdk-image"
}

task packageJre(type: Zip) {
    dependsOn copyImages

    archiveFileName = "j2re-image.zip"
    destinationDirectory = file("$buildRoot/build")

    from "$buildRoot/images/j2re-image"
}

publishing {
    publications {
        jdk(MavenPublication) {
            groupId = 'corretto-artifacts'
            artifactId = "j2sdk.win.unsigned.${arch_alias}.zip"
            version = "${project.version.full}"

            artifact packageJdk
        }
        jre(MavenPublication) {
            groupId = 'corretto-artifacts'
            artifactId = "j2re.win.unsigned.${arch_alias}.zip"
            version = "${project.version.full}"

            artifact packageJre
        }
    }
    repositories {
        maven {
            url maven_repo
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
    }
}

build.dependsOn publish